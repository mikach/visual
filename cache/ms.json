{"_id":"ms","_rev":"26-476652d53ff45e8c0799d8cba9ae8e7a","name":"ms","description":"Tiny ms conversion utility","dist-tags":{"latest":"0.6.1"},"versions":{"0.1.0":{"name":"ms","version":"0.1.0","description":"Tiny ms conversion utility","main":"./ms","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"_id":"ms@0.1.0","dependencies":{},"engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"f21fac490daf1d7667fd180fe9077389cc9442b2","tarball":"http://registry.npmjs.org/ms/-/ms-0.1.0.tgz"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.2.0":{"name":"ms","version":"0.2.0","description":"Tiny ms conversion utility","main":"./ms","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\nms(100)       // 100\n```\n\n```js\nms(60000)             // \"1 minute\"\nms(2 * 60000)         // \"2 minutes\"\nms(ms('10 hours'))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, it returns it immediately.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n","_id":"ms@0.2.0","dist":{"shasum":"6edfc5a063471f7bfd35a5831831c24275ce9dc5","tarball":"http://registry.npmjs.org/ms/-/ms-0.2.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.3.0":{"name":"ms","version":"0.3.0","description":"Tiny ms conversion utility","main":"./ms","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\nms(100)       // 100\n```\n\n```js\nms(60000)             // \"1 minute\"\nms(2 * 60000)         // \"2 minutes\"\nms(ms('10 hours'))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, it returns it immediately.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n","_id":"ms@0.3.0","dist":{"shasum":"03edc348d613e66a56486cfdac53bcbe899cbd61","tarball":"http://registry.npmjs.org/ms/-/ms-0.3.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.4.0":{"name":"ms","version":"0.4.0","description":"Tiny ms conversion utility","main":"./index","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1 minute\"\nms(2 * 60000)         // \"2 minutes\"\nms(ms('10 hours'))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n","_id":"ms@0.4.0","dist":{"shasum":"77ade5470b099bb2d83e232c25763c18cd6963f1","tarball":"http://registry.npmjs.org/ms/-/ms-0.4.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.5.0":{"name":"ms","version":"0.5.0","description":"Tiny ms conversion utility","main":"./index","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours', { long: true }))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n","_id":"ms@0.5.0","dist":{"shasum":"8e52e7e1bf521f9cea30f726de958822eab0ee27","tarball":"http://registry.npmjs.org/ms/-/ms-0.5.0.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.5.1":{"name":"ms","version":"0.5.1","description":"Tiny ms conversion utility","main":"./index","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"component":{"scripts":{"ms/index.js":"index.js"}},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours', { long: true }))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"ms@0.5.1","dist":{"shasum":"98058c8f9c64854d1703ab92bf3f1dcc8e713b4c","tarball":"http://registry.npmjs.org/ms/-/ms-0.5.1.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.6.0":{"name":"ms","version":"0.6.0","description":"Tiny ms conversion utility","main":"./index","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"component":{"scripts":{"ms/index.js":"index.js"}},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours', { long: true }))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"ms@0.6.0","dist":{"shasum":"21dc16a7d1dc2d8ed244dc0e6a71a5c2612b623b","tarball":"http://registry.npmjs.org/ms/-/ms-0.6.0.tgz"},"_from":".","_npmVersion":"1.2.10","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]},"0.6.1":{"name":"ms","version":"0.6.1","description":"Tiny ms conversion utility","main":"./index","devDependencies":{"mocha":"*","expect.js":"*","serve":"*"},"component":{"scripts":{"ms/index.js":"index.js"}},"readme":"# ms.js: miliseconds conversion utility\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5s')      // 5000\nms('100')     // 100\n```\n\n```js\nms(60000)             // \"1m\"\nms(2 * 60000)         // \"2m\"\nms(ms('10 hours'))    // \"10h\"\n```\n\n```js\nms(60000, { long: true })             // \"1 minute\"\nms(2 * 60000, { long: true })         // \"2 minutes\"\nms(ms('10 hours', { long: true }))    // \"10 hours\"\n```\n\n- Node/Browser compatible. Published as `ms` in NPM.\n- If a number is supplied to `ms`, a string with a unit is returned.\n- If a string that contains the number is supplied, it returns it as\na number (e.g: it returns `100` for `'100'`).\n- If you pass a string with a number and a valid unit, the number of\nequivalent ms is returned.\n\n## License\n\nMIT","readmeFilename":"README.md","_id":"ms@0.6.1","dist":{"shasum":"ed57e5f3fc736e09afc85017c5c912a47bc59ab9","tarball":"http://registry.npmjs.org/ms/-/ms-0.6.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"rauchg","email":"rauchg@gmail.com"},"maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}]}},"readme":"\n# ms.js\n\nEver find yourself doing math in your head or writing `1000 * 60 * 60 â€¦`?\nDon't want to add obstrusive `Number` prototype extensions to your reusable\n/ distributable modules and projects?\n\n`ms` is a tiny utility that you can leverage when your application needs to\naccept a number of miliseconds as a parameter.\n\nIf a number is supplied to `ms`, it returns it immediately (e.g:\nIf a string that contains the number is supplied, it returns it immediately as\na number (e.g: it returns `100` for `'100'`).\n\nHowever, if you pass a string with a number and a valid unit, hte number of\nequivalent ms is returned.\n\n```js\nms('1d')      // 86400000\nms('10h')     // 36000000\nms('2h')      // 7200000\nms('1m')      // 60000\nms('5ms')     // 5000\nms('100')     // '100'\nms(100)       // 100\n```\n\n## How to use\n\n### Node\n\n```js\nrequire('ms')\n```\n\n### Browser\n\n```html\n<script src=\"ms.js\"></script>\n```\n\n## Credits\n\n(The MIT License)\n\nCopyright (c) 2011 Guillermo Rauch &lt;guillermo@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","maintainers":[{"name":"rauchg","email":"rauchg@gmail.com"}],"time":{"modified":"2013-06-27T02:56:20.904Z","created":"2011-12-21T19:38:08.664Z","0.1.0":"2011-12-21T19:38:26.538Z","0.2.0":"2012-09-03T20:33:06.093Z","0.3.0":"2012-09-07T20:36:45.931Z","0.4.0":"2012-10-22T17:01:26.046Z","0.5.0":"2012-11-10T00:39:49.944Z","0.5.1":"2013-02-24T20:27:27.010Z","0.6.0":"2013-03-15T15:26:35.127Z","0.6.1":"2013-05-10T15:38:08.059Z"},"users":{"dodo":true,"aaron":true,"pid":true,"hughsk":true,"eknkc":true,"forbeslindesay":true},"_attachments":{"ms-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-PMhmBJ2acQ5Dh7H0lU0z6Q==","length":1444,"stub":true},"ms-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":22,"digest":"md5-0xRcmKwCRM9e5iug/BaQZA==","length":1389,"stub":true},"ms-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":20,"digest":"md5-25X8JKELiLBRTIrQ8zTiBA==","length":2360,"stub":true},"ms-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-8HIgtHjmMh/gsfpr5sG52g==","length":2304,"stub":true},"ms-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-kFb3FU38dWKrjrQH8S5mFg==","length":2013,"stub":true},"ms-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-lSjmOW5HHsfpYdVlPExJTQ==","length":74687,"stub":true},"ms-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":9,"digest":"md5-k3/+4RgcAREu2vCMf6RN3Q==","length":74655,"stub":true},"ms-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-ZfDmjoU//PB6JjOvLhD8Ug==","length":81920,"stub":true}}}
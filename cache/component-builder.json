{"_id":"component-builder","_rev":"75-54398672fa52279aba1f12397e99cdcb","name":"component-builder","description":"Component build tool","dist-tags":{"latest":"0.9.2"},"versions":{"0.0.1":{"name":"component-builder","version":"0.0.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.1","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"\n# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.caa&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.1","dist":{"shasum":"3d42b5690b57c2eb3189fef9f83feff2461f00cf","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.2":{"name":"component-builder","version":"0.0.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.2","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"\n# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.caa&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.2","dist":{"shasum":"a96c3e0bba82e6327eb2605f8ada82f319d49234","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.3":{"name":"component-builder","version":"0.0.3","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.2","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.3","dist":{"shasum":"0c297848f8e9472178a27f71e2bb6a42be464e0b","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.4":{"name":"component-builder","version":"0.0.4","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.2","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.4","dist":{"shasum":"9e0b90a76fc24130da95192d08e9c500ced53960","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.4.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.5":{"name":"component-builder","version":"0.0.5","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.2","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.5","dist":{"shasum":"bb068b51fd18a5685a3b0487d77ba9710d212d93","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.5.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.6":{"name":"component-builder","version":"0.0.6","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.2","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.6","dist":{"shasum":"1aa11af7670bb2adeb93e3d592a0513765d6221a","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.6.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.7":{"name":"component-builder","version":"0.0.7","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"batch":"0.1.1","component-require":"0.0.3","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.0.7","dist":{"shasum":"f1ed7017a41c90d64a1cd53483c7901d0dd775dc","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.0.7.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.1.0":{"name":"component-builder","version":"0.1.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.1.0","dist":{"shasum":"975a996f1f4ee6911034e8cdac198d45b7fc8774","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.1.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.2.0":{"name":"component-builder","version":"0.2.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component-builder@0.2.0","dist":{"shasum":"8b0d8dba7ca054a2edddeff42ef71ac2184de299","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.2.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.2.1":{"name":"component-builder","version":"0.2.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.2.1","dist":{"shasum":"82aa685e20a4d28957a91c6ee51a22f7f39f28c7","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.2.1.tgz"},"_npmVersion":"1.1.64","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.3.0":{"name":"component-builder","version":"0.3.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.3.0","dist":{"shasum":"d1b467357f5c964e5309ad59dc7a15e1d7765326","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.3.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.0":{"name":"component-builder","version":"0.4.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","rework":"0.7.0","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.4.0","dist":{"shasum":"bc8fd6b13d4fc30f77ba5fd0f5213889cc72c92f","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.4.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.1":{"name":"component-builder","version":"0.4.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","rework":"0.7.0","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.4.1","dist":{"shasum":"f98f9d663f1beef5ea6aa2cbaf1247d8487f035d","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.4.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.4.2":{"name":"component-builder","version":"0.4.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.1.1","rework":"0.7.0","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.4.2","dist":{"shasum":"e8b5e7d212bfc6e25793ca40693ffdb41152e40b","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.4.2.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.0":{"name":"component-builder","version":"0.5.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.2.1","rework":"0.7.0","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.5.0","dist":{"shasum":"c72360628a63410d0e6ef2190aae2062958b0706","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.5.0.tgz"},"_npmVersion":"1.1.68","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.1":{"name":"component-builder","version":"0.5.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.2.1","rework":"0.7.0","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component-builder@0.5.1","dist":{"shasum":"e572d52b0b1eabd7abdede10ccac5210d098e2fd","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.5.1.tgz"},"_npmVersion":"1.1.68","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.2":{"name":"component-builder","version":"0.5.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.2.1","rework":"0.9.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.5.2","dist":{"shasum":"e6353ab9446c7caa27336dba64eef38ab11dc791","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.5.2.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.3":{"name":"component-builder","version":"0.5.3","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.0","batch":"0.2.1","rework":"0.10.2","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.5.3","dist":{"shasum":"18991dbfcf7b4094840feaed56ad5aa4648f316b","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.5.3.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.5.5":{"name":"component-builder","version":"0.5.5","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.1.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.5.5","dist":{"shasum":"6bb7abd0edf7e834e6a7435932a674b3a876b6bb","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.5.5.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.0":{"name":"component-builder","version":"0.6.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.0","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.0","dist":{"shasum":"a2d00294912513680f5700910e8b487115fd1160","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.1":{"name":"component-builder","version":"0.6.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.0","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.1","dist":{"shasum":"aefe486a51d6acacdc6b5e538dc03483d7652ffb","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.2":{"name":"component-builder","version":"0.6.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.0","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.2","dist":{"shasum":"ffaf3ced80be3ecaf53377e05d6650e54df6bfaa","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.2.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.3":{"name":"component-builder","version":"0.6.3","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.0","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.5.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.3","dist":{"shasum":"d42abce0a8c741598d922121a05f5725c48ce7ed","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.3.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.4":{"name":"component-builder","version":"0.6.4","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.5.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.4","dist":{"shasum":"ca94b26dc8b23e5169db1d44b1ee834a3dd04764","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.4.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.6.5":{"name":"component-builder","version":"0.6.5","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.5.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#conf\n\n  The component.json contents.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a \n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Add the given dependency lookup `path`.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## License \n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.6.5","dist":{"shasum":"33f6d5a62f250e5c242e8a592f56ec3f5f4ece98","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.6.5.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.7.0":{"name":"component-builder","version":"0.7.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.7.0","dist":{"shasum":"64997c3e57f596f7523b359f8c1707512bbff390","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.7.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.7.1":{"name":"component-builder","version":"0.7.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.7.1","dist":{"shasum":"6b74d1b2b2b1268d7b0c51511c9189625ff5c324","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.7.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.8.0":{"name":"component-builder","version":"0.8.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.8.0","dist":{"shasum":"40f163837c085a332aa3825beb00eae1e21e75b5","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.8.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.8.1":{"name":"component-builder","version":"0.8.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.8.1","dist":{"shasum":"553bf5ce8e28f3e62ab8b4fa0903c4fc6c66d407","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.8.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.8.2":{"name":"component-builder","version":"0.8.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.8.2","dist":{"shasum":"3dfcab2566f7ea67011c3727afaa64bd322653ce","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.8.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.8.3":{"name":"component-builder","version":"0.8.3","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.2","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","fs-extra":"~0.6.0"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## Hooks\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](https://github.com/visionmedia/rework).\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","_id":"component-builder@0.8.3","dist":{"shasum":"c455f5d4265b6ad73b28f001de0e9893e0259cd4","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.8.3.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.9.0":{"name":"component-builder","version":"0.9.0","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.2.2","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","cp":"~0.1.0","string-to-js":"0.0.1"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3","styl":"0.2.2"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n### Builder#hook(name, fn)\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](https://github.com/visionmedia/rework).\n  \n  Available hooks are:\n  - `before scripts`\n  - `before styles`\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/builder.js/issues"},"_id":"component-builder@0.9.0","dist":{"shasum":"f345772b5b4b8b8ce083483df01d783be137d1b8","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.9.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.9.1":{"name":"component-builder","version":"0.9.1","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.3.0","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","cp":"~0.1.0","string-to-js":"0.0.1"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3","styl":"0.2.2"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n### Builder#hook(name, fn)\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](https://github.com/visionmedia/rework).\n  \n  Available hooks are:\n  - `before scripts`\n  - `before styles`\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/builder.js/issues"},"_id":"component-builder@0.9.1","dist":{"shasum":"518eb974e4c26ebe37df7f2539340752620ac8c8","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.9.1.tgz"},"_from":".","_npmVersion":"1.3.8","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.9.2":{"name":"component-builder","version":"0.9.2","description":"Component build tool","keywords":["component","build"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"dependencies":{"component-require":"0.3.1","batch":"0.2.1","mkdirp":"0.3.4","debug":"*","better-assert":"~0.1.0","cp":"~0.1.0","string-to-js":"0.0.1"},"devDependencies":{"mocha":"*","should":"*","ejs":"~0.8.3","styl":"0.2.2"},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"main":"index","readme":"# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#config\n\n  The component's component.json contents as an object.\n\n### Builder#addSourceURLs()\n\n  Add \"sourceURL\" support, wrapping the module functions\n  in `Function()` calls so that browsers may assign a\n  name to the scripts to aid in debugging.\n\n### Builder#addLookup(path)\n\n  Append the given dependency lookup `path`. This lookup `path` is\n  \"global\", thus it influences all dependency lookups.\n\n### Builder#development()\n\n  Include development dependencies.\n\n### Builder#addFile(type, filename, val)\n\n  Add a fabricated file of the given `type`, `filename`,\n  and contents `val`. For example if you were translating\n  a Stylus file to .css, or a Jade template to .js you may\n  do something like:\n\n```js\nbuilder.addFile('scripts', 'view.js', 'compiled view js');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n### Builder#hook(name, fn)\n\n  A build \"hook\" is like an event that lets you manipulate the build in process. For\n  example you may use a hook to translate coffee script files to javascript automatically,\n  or compile a template to javascript so that it may be loaded with `require()`, or use\n  CSS pre-processors such as [rework](https://github.com/visionmedia/rework).\n  \n  Available hooks are:\n  - `before scripts`\n  - `before styles`\n\n## Examples\n\n### Basic build\n\n  The follow demonstrates the most basic build you can possible do using\n  this component builder implementation. A root component directory is\n  passed to `new Builder`, followed by a `.build()` call which then responds\n  with a `res` object containing the followign properties:\n\n  - `.require` the require implementation script\n  - `.js` compiled javascript\n  - `.css` compiled css\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.build(function(err, res){\n  if (err) throw err;\n  console.log(res.require + res.js);\n  console.log(res.css);\n});\n```\n\n### Lookup paths\n\n  In the previous example all the application's private components live in `./lib`,\n  thus if you want to specify dependencies without a leading `\"lib/\"` a lookup path\n  should be created with `.addLookup()`:\n\n```js\nvar builder = new Builder('lib/boot');\n\nbuilder.addLookup('lib');\n...\n```\n\n## License\n\n  MIT\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/builder.js/issues"},"_id":"component-builder@0.9.2","dist":{"shasum":"78b59e82ef174420a2067e702780fa0d17ab6947","tarball":"http://registry.npmjs.org/component-builder/-/component-builder-0.9.2.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]}},"readme":"\n# builder.js\n\n  Component build tool. This is the library that `component(1)` utilizes\n  to perform component builds.\n\n## Installation\n\n    $ npm install component-builder\n\n## API\n\n### new Builder(dir)\n\n  Creates a new `Builder` for the given component's `dir`:\n\n```js\nvar Builder = require('component-builder');\nvar builder = new Builder('components/visionmedia-page');\n```\n\n### Builder#ignore(name, [type])\n\n  Ignore building `name`'s `type`, where `type` is \"scripts\" or \"styles\". When\n  no `type` is given both are ignored, this includes dependencies of `name` as well.\n\n```js\nbuilder.ignore('visionmedia-page')\n```\n\n### Builder#build(fn)\n\n  Perform the build and pass an object to `fn(err, obj)` containing\n  the `.css` and `.js` properties.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.caa&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"time":{"modified":"2013-09-12T14:23:00.129Z","created":"2012-08-16T18:25:16.900Z","0.0.1":"2012-08-16T18:25:18.458Z","0.0.2":"2012-09-01T21:23:51.168Z","0.0.3":"2012-09-06T02:28:53.602Z","0.0.4":"2012-09-06T03:43:15.491Z","0.0.5":"2012-09-14T23:42:41.178Z","0.0.6":"2012-10-12T16:24:41.497Z","0.0.7":"2012-10-16T15:43:00.315Z","0.1.0":"2012-10-19T22:40:20.332Z","0.2.0":"2012-10-22T22:07:33.036Z","0.2.1":"2012-10-24T16:22:46.176Z","0.3.0":"2012-10-31T21:49:37.660Z","0.4.0":"2012-11-04T20:20:01.887Z","0.4.1":"2012-11-07T00:09:10.228Z","0.4.2":"2012-11-07T01:15:14.630Z","0.5.0":"2012-12-04T22:26:59.268Z","0.5.1":"2012-12-05T00:18:13.081Z","0.5.2":"2012-12-20T19:38:54.476Z","0.5.3":"2012-12-20T20:29:32.812Z","0.5.5":"2012-12-30T18:05:41.662Z","0.6.0":"2013-01-01T23:21:10.950Z","0.6.1":"2013-01-02T22:06:07.055Z","0.6.2":"2013-01-05T03:50:14.020Z","0.6.3":"2013-02-15T16:39:00.947Z","0.6.4":"2013-03-19T19:32:44.181Z","0.6.5":"2013-03-29T15:24:45.205Z","0.7.0":"2013-04-11T22:33:42.845Z","0.7.1":"2013-04-24T15:29:29.695Z","0.8.0":"2013-04-25T02:37:20.185Z","0.8.1":"2013-04-26T15:48:08.913Z","0.8.2":"2013-05-14T00:05:38.925Z","0.8.3":"2013-06-06T19:46:44.525Z","0.9.0":"2013-07-19T16:23:57.636Z","0.9.1":"2013-09-06T15:29:40.861Z","0.9.2":"2013-09-12T14:23:00.129Z"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.caa"},"users":{},"repository":{"type":"git","url":"https://github.com/component/builder.js.git"},"_attachments":{"component-builder-0.9.2.tgz":{"content_type":"application/octet-stream","revpos":74,"digest":"md5-VH4eVm4ogmOiGldFqAsGlQ==","length":8602,"stub":true},"component-builder-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":72,"digest":"md5-beeeOT01CHNXsqka+unBEw==","length":8578,"stub":true},"component-builder-0.9.0.tgz":{"content_type":"application/octet-stream","revpos":70,"digest":"md5-6Mg5efRGQ+NPvCwmsGvy8Q==","length":8589,"stub":true},"component-builder-0.8.3.tgz":{"content_type":"application/octet-stream","revpos":68,"digest":"md5-so+ISlCym4q9yPp1Bg99jg==","length":8304,"stub":true},"component-builder-0.8.2.tgz":{"content_type":"application/octet-stream","revpos":66,"digest":"md5-bF8LMRLf1joONhGLqHq+Wg==","length":8216,"stub":true},"component-builder-0.8.1.tgz":{"content_type":"application/octet-stream","revpos":64,"digest":"md5-skx0EjOcSI0pTgSUt5ew5g==","length":8102,"stub":true},"component-builder-0.8.0.tgz":{"content_type":"application/octet-stream","revpos":62,"digest":"md5-qxvOjmakgF903M0RSqwWjw==","length":8036,"stub":true},"component-builder-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":60,"digest":"md5-w8//7A02ERbaOHTvZ4Ic0g==","length":7952,"stub":true},"component-builder-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":58,"digest":"md5-hW7+vaxQCt3HTn7+vygIGQ==","length":7882,"stub":true},"component-builder-0.6.5.tgz":{"content_type":"application/octet-stream","revpos":56,"digest":"md5-Daha9DdENkRKk9y01Imp6Q==","length":7208,"stub":true},"component-builder-0.6.4.tgz":{"content_type":"application/octet-stream","revpos":54,"digest":"md5-Ohw2EEhWjUgwAHjUZwGX0A==","length":7168,"stub":true},"component-builder-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-ReqS+GGJ2SF3mtf3Gz3/oA==","length":7112,"stub":true},"component-builder-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-wqkDeQl2UGLgUQQSXY0Fuw==","length":6988,"stub":true},"component-builder-0.6.1.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-yz5GRtnL+JCvgKRLPHJmVA==","length":6779,"stub":true},"component-builder-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-uq0rtm5pUEtm4svoEPo9LQ==","length":6744,"stub":true},"component-builder-0.5.5.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-BDYH2bSn/PJpPeGEYoVJkA==","length":6655,"stub":true},"component-builder-0.5.3.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-Zh/AHioXAiwjyVylW9FoNQ==","length":6352,"stub":true},"component-builder-0.5.2.tgz":{"content_type":"application/octet-stream","revpos":41,"digest":"md5-+02eaD65lWYmmsjlnYDG1w==","length":6338,"stub":true},"component-builder-0.5.1.tgz":{"content_type":"application/octet-stream","revpos":39,"digest":"md5-cqd42LiHVnvkMnytRJxMhA==","length":5923,"stub":true},"component-builder-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":37,"digest":"md5-Sk0uIKtXOZYRV8xG8i3C/w==","length":5895,"stub":true},"component-builder-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":35,"digest":"md5-5TH0+dohOM5JPWyHRDR5Kw==","length":5751,"stub":true},"component-builder-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":33,"digest":"md5-NOpYZrginReE8SKGtGxmEg==","length":5728,"stub":true},"component-builder-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":31,"digest":"md5-ibXxld/70T+gqt4kxtiWQg==","length":5714,"stub":true},"component-builder-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":29,"digest":"md5-j0n4gx6sBF8ONPbk1m13QQ==","length":4816,"stub":true},"component-builder-0.2.1.tgz":{"content_type":"application/octet-stream","revpos":27,"digest":"md5-Y8ViTDs67AP/tY1VrsL2DA==","length":4783,"stub":true},"component-builder-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":25,"digest":"md5-8krE5zLAiAYiMa4gFfZoGA==","length":4748,"stub":true},"component-builder-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":19,"digest":"md5-w1HcCLtlTTg17OPDOWuUgA==","length":4556,"stub":true},"component-builder-0.0.7.tgz":{"content_type":"application/octet-stream","revpos":17,"digest":"md5-4HHk98fv5LciED2ZI6dqkg==","length":4439,"stub":true},"component-builder-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":15,"digest":"md5-4CZx7dDX/gw9nTukH3pB9A==","length":4428,"stub":true},"component-builder-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":13,"digest":"md5-Hd4j8IhODhslK425wodQXA==","length":4414,"stub":true},"component-builder-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":10,"digest":"md5-XbMX2KDrVuv/g8sBcWbbZw==","length":4288,"stub":true},"component-builder-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":8,"digest":"md5-Y8q/8NUBNInqJ9BsycG7BQ==","length":4267,"stub":true},"component-builder-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":6,"digest":"md5-zPzzbym5oA7er6HxlzlvDQ==","length":3997,"stub":true},"component-builder-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-pMYOtxeTTHhq0/3ptbvelw==","length":3990,"stub":true}}}
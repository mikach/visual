{"_id":"component","_rev":"135-8aa3e570ce0629f730f09211b1649e5c","name":"component","description":"Component package manager consuming git repositories","dist-tags":{"latest":"0.17.6"},"versions":{"0.0.1":{"name":"component","version":"0.0.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.1","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.1","dist":{"shasum":"8df7b8c6b673641c04b102e58e74c69a78d402c8","tarball":"http://registry.npmjs.org/component/-/component-0.0.1.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.2":{"name":"component","version":"0.0.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.1","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.2","dist":{"shasum":"edcc412975dbd37b0c17a736435b4c270fad59aa","tarball":"http://registry.npmjs.org/component/-/component-0.0.2.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.3":{"name":"component","version":"0.0.3","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.1","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.3","dist":{"shasum":"1d4cda601644eed448537ebe659dad2ff3faef65","tarball":"http://registry.npmjs.org/component/-/component-0.0.3.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.4":{"name":"component","version":"0.0.4","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.1","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.4","dist":{"shasum":"476b0fc16b20a1e3c5993731eac297959fc3bc0d","tarball":"http://registry.npmjs.org/component/-/component-0.0.4.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.5":{"name":"component","version":"0.0.5","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.2","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.5","dist":{"shasum":"2cfff59924125df2bbb29d5744119b5014dd1edb","tarball":"http://registry.npmjs.org/component/-/component-0.0.5.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.6":{"name":"component","version":"0.0.6","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.4","string-to-js":"0.0.1","which":"1.0.5","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.6","dist":{"shasum":"b1aefb904cf77b1cfaf63664033376171f5479ee","tarball":"http://registry.npmjs.org/component/-/component-0.0.6.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.0.7":{"name":"component","version":"0.0.7","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.3","mkdirp":"0.3.3","superagent":"0.8.0","component-builder":"0.0.5","string-to-js":"0.0.1","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs","component-register":"bin/component-register"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - write components that include their own styles, images, scripts, or any combo\n  - write commonjs style scripts\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.0.7","dist":{"shasum":"dc12232d0208379da2a05acebb59bf7a6d4b8320","tarball":"http://registry.npmjs.org/component/-/component-0.0.7.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.1.0":{"name":"component","version":"0.1.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.5","string-to-js":"0.0.1","batch":"*","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs"},"main":"index","_id":"component@0.1.0","dist":{"shasum":"688a2ff69c2fb52e23a4104463a7f9c60cf6966e","tarball":"http://registry.npmjs.org/component/-/component-0.1.0.tgz"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.1.1":{"name":"component","version":"0.1.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.5","string-to-js":"0.0.1","batch":"*","debug":"*","win-spawn":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-docs":"bin/component-docs"},"main":"index","readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - fast\n    - ~2x faster than npm\n    - ~8x faster than volo\n    - ~8x faster than bower\n    - installs 85 components in ~10s\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.1.1","dist":{"shasum":"ab7c1b1d4e5d591fb0c1b434ac819b60c9089030","tarball":"http://registry.npmjs.org/component/-/component-0.1.1.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.2.0":{"name":"component","version":"0.2.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.5","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - fast\n    - ~2x faster than npm\n    - ~8x faster than volo\n    - ~8x faster than bower\n    - installs 85 components in ~10s\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.2.0","dist":{"shasum":"bfcbd9d2c69189ef0fa4c4b13ec8fe6beab9a34c","tarball":"http://registry.npmjs.org/component/-/component-0.2.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.3.0":{"name":"component","version":"0.3.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.5","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.3.0","dist":{"shasum":"9fa930bd4b47cae7aa123f778ae1003428a4e957","tarball":"http://registry.npmjs.org/component/-/component-0.3.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.0":{"name":"component","version":"0.4.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.6","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.4.0","dist":{"shasum":"3cecbc5bc10869e2e1531c89bf0a1dcebb0cc1f3","tarball":"http://registry.npmjs.org/component/-/component-0.4.0.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.1":{"name":"component","version":"0.4.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.4","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.7","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.4.1","dist":{"shasum":"27a69c7b6c1cdb89922c247192405f2e50e9bdc3","tarball":"http://registry.npmjs.org/component/-/component-0.4.1.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.4.2":{"name":"component","version":"0.4.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.0.7","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.4.2","dist":{"shasum":"edffebc5cf7d5e0deaaf5f2e724b5f1f2c688265","tarball":"http://registry.npmjs.org/component/-/component-0.4.2.tgz"},"_npmVersion":"1.1.61","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.5.0":{"name":"component","version":"0.5.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.1.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.5.0","dist":{"shasum":"64e4020bb907e280bd01c7abba7eb59acc32fa65","tarball":"http://registry.npmjs.org/component/-/component-0.5.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.0":{"name":"component","version":"0.6.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.2.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.6.0","dist":{"shasum":"c1ab1f8d56a93d41a569471af3b5636b48ae0dc3","tarball":"http://registry.npmjs.org/component/-/component-0.6.0.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.2":{"name":"component","version":"0.6.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.2.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","_id":"component@0.6.2","dist":{"shasum":"235ffc070bd5d5d52af9a774d4804dac0f73f88f","tarball":"http://registry.npmjs.org/component/-/component-0.6.2.tgz"},"_npmVersion":"1.1.63","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.3":{"name":"component","version":"0.6.3","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.2.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.6.3","dist":{"shasum":"072ab72d2c8e151cd42050501eaf6d19bce7b344","tarball":"http://registry.npmjs.org/component/-/component-0.6.3.tgz"},"_npmVersion":"1.1.64","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.6.4":{"name":"component","version":"0.6.4","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.2.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","readme":"# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [List](https://github.com/component/component/wiki/Components) of components\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.6.4","dist":{"shasum":"b7baa6d07ea3656bab7dd0cd8a2557155bfe3042","tarball":"http://registry.npmjs.org/component/-/component-0.6.4.tgz"},"_npmVersion":"1.1.64","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.7.0":{"name":"component","version":"0.7.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.3.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"\n  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.7.0","dist":{"shasum":"317133c104c1174c61e8d37c5df7abe19edb076e","tarball":"http://registry.npmjs.org/component/-/component-0.7.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.7.1":{"name":"component","version":"0.7.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.3.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"\n  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.7.1","dist":{"shasum":"4162a4892812d1ab77017e9108291700a3d8fc4d","tarball":"http://registry.npmjs.org/component/-/component-0.7.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.8.0":{"name":"component","version":"0.8.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.4.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"\n  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.8.0","dist":{"shasum":"eb6b198af19da72f05206bf4cea5059cca04ffc4","tarball":"http://registry.npmjs.org/component/-/component-0.8.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.9.0":{"name":"component","version":"0.9.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.9.3","component-builder":"0.4.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.0","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"\n  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.9.0","dist":{"shasum":"7626a2bd8b01a9a7588d6cdd02903b54098de570","tarball":"http://registry.npmjs.org/component/-/component-0.9.0.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.9.1":{"name":"component","version":"0.9.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.4.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-open":"bin/component-open","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n\n## Example applications\n\n  Open source application examples:\n  \n  - [Todo list](https://github.com/component/todo)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.9.1","dist":{"shasum":"1239e3e26edb139879a36c5a5d2e03af87efa86d","tarball":"http://registry.npmjs.org/component/-/component-0.9.1.tgz"},"_npmVersion":"1.1.65","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.10.0":{"name":"component","version":"0.10.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.5.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-spawn":"0.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n     $ npm install -g component\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n\n## Example applications\n\n  Open source application examples:\n  \n  - [Todo list](https://github.com/component/todo)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.10.0","dist":{"shasum":"24194b0254d666c16fb62572ea152393a5d0079c","tarball":"http://registry.npmjs.org/component/-/component-0.10.0.tgz"},"_npmVersion":"1.1.68","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.10.1":{"name":"component","version":"0.10.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.5.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n     \n  With node binary on OSX:\n  \n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n\n## Example applications\n\n  Open source application examples:\n  \n  - [Todo list](https://github.com/component/todo)\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","readmeFilename":"Readme.md","_id":"component@0.10.1","dist":{"shasum":"5a37d581d02a4b31132ec019d014d6df36984824","tarball":"http://registry.npmjs.org/component/-/component-0.10.1.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.11.0":{"name":"component","version":"0.11.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"term-css":"1.0.0","commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.5.5","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Extensions\n\n - [component-graph(1)] dependency graphs for component projects\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.11.0","dist":{"shasum":"79c94a84e56e1a56840feef7f345f4c53a5e166f","tarball":"http://registry.npmjs.org/component/-/component-0.11.0.tgz"},"_npmVersion":"1.1.66","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"directories":{}},"0.11.1":{"name":"component","version":"0.11.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.6.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.11.1","dist":{"shasum":"d2ee67abb6d758eea5be05140f3daa7e7feaa995","tarball":"http://registry.npmjs.org/component/-/component-0.11.1.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.12.0":{"name":"component","version":"0.12.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.6.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.12.0","dist":{"shasum":"8c92a1f876ecab24934c80758202f94e893682f6","tarball":"http://registry.npmjs.org/component/-/component-0.12.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.13.0":{"name":"component","version":"0.13.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.6.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.13.0","dist":{"shasum":"8aee0a339d847b9937024f41e253bb945bdc219b","tarball":"http://registry.npmjs.org/component/-/component-0.13.0.tgz"},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.13.1":{"name":"component","version":"0.13.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.6.4","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.13.1","dist":{"shasum":"0eae4e25a2d3656288c077d231bb3e6b0a48266c","tarball":"http://registry.npmjs.org/component/-/component-0.13.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.13.2":{"name":"component","version":"0.13.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.6.4","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.13.2","dist":{"shasum":"37d1c96099aced2336c6bc3b0ec20bf11493be38","tarball":"http://registry.npmjs.org/component/-/component-0.13.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.14.0":{"name":"component","version":"0.14.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.7.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.14.0","dist":{"shasum":"354926afbf638337a4751f4536309301d6e1300f","tarball":"http://registry.npmjs.org/component/-/component-0.14.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.15.0":{"name":"component","version":"0.15.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  The concept of components themselves are nothing new, Drupal\n  for example has been doing this for years, however it seemed the concept was never\n  really translated to the client. My hope is that other communities will re-implement this\n  simple tool in their language of choice (or use this one) so that we can all consume components\n  easily.\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - [Todo list](https://github.com/component/todo)\n  - [Component.io](https://github.com/component/component.io)\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.15.0","dist":{"shasum":"d934f73d2d087a1a8ee963e822a048c666cc60ff","tarball":"http://registry.npmjs.org/component/-/component-0.15.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.15.1":{"name":"component","version":"0.15.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki","component-docs":"bin/component-docs"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.15.1","dist":{"shasum":"3ba74274dc81b2da38e2f1940a2b9858f3a73ac2","tarball":"http://registry.npmjs.org/component/-/component-0.15.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.0":{"name":"component","version":"0.16.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.0","dist":{"shasum":"f02c9e41ea12957b6e95a99935f70af7455863f6","tarball":"http://registry.npmjs.org/component/-/component-0.16.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.1":{"name":"component","version":"0.16.1","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.1","dist":{"shasum":"b585675bb222b6c98aea7f5a1fe912f04beddc25","tarball":"http://registry.npmjs.org/component/-/component-0.16.1.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.2":{"name":"component","version":"0.16.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.2","dist":{"shasum":"07096369b32fc467639057f5aaaefc2916b8f704","tarball":"http://registry.npmjs.org/component/-/component-0.16.2.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.3":{"name":"component","version":"0.16.3","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.2.1","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.3","dist":{"shasum":"7913edfc35c62a1e10975db290f21e968e196f89","tarball":"http://registry.npmjs.org/component/-/component-0.16.3.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.4":{"name":"component","version":"0.16.4","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.10.0","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.4","dist":{"shasum":"d19fb8c22a5850ed81f3d8028d5b41c90848db47","tarball":"http://registry.npmjs.org/component/-/component-0.16.4.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.5":{"name":"component","version":"0.16.5","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.0","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n  You may also use [GitHub OAuth Tokens](https://help.github.com/articles/creating-an-oauth-token-for-command-line-use) instead of your username and password. If my token were `testing123` my `~/.netrc` file would look like the following:\n\n```\nmachine raw.github.com\n  login testing123\n  password x-oauth-basic\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.5","dist":{"shasum":"581032751030ca4ca93c68aa316daf6624e8b002","tarball":"http://registry.npmjs.org/component/-/component-0.16.5.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.6":{"name":"component","version":"0.16.6","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.2","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","_id":"component@0.16.6","dist":{"shasum":"b48c62542dc435c3160b1d6cc68df0a51be5176b","tarball":"http://registry.npmjs.org/component/-/component-0.16.6.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.7":{"name":"component","version":"0.16.7","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.16.7","dist":{"shasum":"4de22d4d4a34e7d62c8fac3f7f060e01af235a1b","tarball":"http://registry.npmjs.org/component/-/component-0.16.7.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.16.8":{"name":"component","version":"0.16.8","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.8.3","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.16.8","dist":{"shasum":"6548e7e73f8f713b0b22db7a89fcc9fa2a261b67","tarball":"http://registry.npmjs.org/component/-/component-0.16.8.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.0":{"name":"component","version":"0.17.0","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.0","debug":"*","rimraf":"~2.1.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.0","dist":{"shasum":"036cc6d8142e8eef311ddac89d460dcec2985694","tarball":"http://registry.npmjs.org/component/-/component-0.17.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.2":{"name":"component","version":"0.17.2","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.0","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.3","debug":"*","rimraf":"~2.1.4","superagent-proxy":"0.0.1"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n - In-browser component [builder](http://component-kelonye.rhcloud.com/)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n  - [NoFlo](noflojs.org) flow-based programming environment\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.2","dist":{"shasum":"014332c0485bbb49c30d60b489529a5d4fe2bde2","tarball":"http://registry.npmjs.org/component/-/component-0.17.2.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.3":{"name":"component","version":"0.17.3","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.1","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.3","debug":"*","rimraf":"~2.1.4","superagent-proxy":"0.0.1"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n - In-browser component [builder](http://component-kelonye.rhcloud.com/)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n  - [NoFlo](noflojs.org) flow-based programming environment\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.3","dist":{"shasum":"9dcf4d0ff9b9379e1aab3b108ddf413d1299b821","tarball":"http://registry.npmjs.org/component/-/component-0.17.3.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.4":{"name":"component","version":"0.17.4","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.3","debug":"*","rimraf":"~2.1.4","superagent-proxy":"0.0.1"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n - In-browser component [builder](http://component-kelonye.rhcloud.com/)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n  - [NoFlo](noflojs.org) flow-based programming environment\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.4","dist":{"shasum":"688e7c9901e9cb6bf078d60e309b117268b26aeb","tarball":"http://registry.npmjs.org/component/-/component-0.17.4.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.5":{"name":"component","version":"0.17.5","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.3","debug":"*","rimraf":"~2.1.4","superagent-proxy":"0.0.1"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n - In-browser component [builder](http://component-kelonye.rhcloud.com/)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n  - [NoFlo](noflojs.org) flow-based programming environment\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.5","dist":{"shasum":"bfb4d49673b35d22ce52f65cd25a01cbe1a099a4","tarball":"http://registry.npmjs.org/component/-/component-0.17.5.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]},"0.17.6":{"name":"component","version":"0.17.6","description":"Component package manager consuming git repositories","keywords":["component","package","client","browser","module"],"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"repository":{"type":"git","url":"git://github.com/component/component.git"},"dependencies":{"commander":"1.0.5","mkdirp":"0.3.4","superagent":"0.15.3","component-builder":"0.9.2","string-to-js":"0.0.1","jog":"0.4.0","batch":"0.3.2","win-fork":"1.0.0","archy":"0.0.2","netrc":"~0.1.3","debug":"*","rimraf":"~2.1.4","superagent-proxy":"0.0.1","open":"0.0.4"},"devDependencies":{"express":"3.0.0","minstache":"0.0.1","mocha":"*","should":"*"},"bin":{"component":"bin/component","component-info":"bin/component-info","component-help":"bin/component-help","component-install":"bin/component-install","component-ls":"bin/component-ls","component-convert":"bin/component-convert","component-build":"bin/component-build","component-search":"bin/component-search","component-create":"bin/component-create","component-changes":"bin/component-changes","component-wiki":"bin/component-wiki"},"main":"index","engines":{"node":">= 0.8.0"},"readme":"  ![web component logo](http://i49.tinypic.com/e7nj9v.png)\n\n  Component package manager for building a better web.\n\n## Installation\n\n  With [node](http://nodejs.org) previously installed:\n\n     $ npm install -g component\n\n  With node binary on OSX:\n\n     $ (cd /usr/local && \\\n        curl -L# http://nodejs.org/dist/v0.8.15/node-v0.8.15-darwin-x86.tar.gz \\\n        | tar -zx --strip 1) \\\n       && npm install -g component \\\n       && printf \"installed component(1) %s\\n\" $(component --version)\n\n  NOTE: tested with node 0.8.x\n\n## Features\n\n  - write modular commonjs components\n  - write components that include their own styles, images, scripts, or any combo\n  - no registry publishing or account required, uses github repositories\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n  - avoid name squatting through github's naming conventions\n  - build your components with `--standalone` to share them with non-component(1) users\n  - discovery of useful packages is simple with a robust search\n  - view documentation from the command line\n  - simple private registry set up (all you need is a file server)\n  - very fast installs (50 components in ~4.5s)\n  - very fast search (~300ms)\n\n## Links\n\n - [List](https://github.com/component/component/wiki/Components) of all available components\n - [Wiki](https://github.com/component/component/wiki)\n - [Mailing List](https://groups.google.com/group/componentjs)\n - [Google+ Community](https://plus.google.com/u/0/communities/109771441994395167277)\n - component [\"spec\"](https://github.com/component/component/wiki/Spec)\n - join `#components` on freenode\n - follow [@component_js](http://twitter.com/component_js) on twitter\n - [Building better components](https://github.com/component/component/wiki/Building-better-components) tips\n - [F.A.Q](https://github.com/component/component/wiki/F.A.Q)\n - In-browser component [builder](http://component-kelonye.rhcloud.com/)\n\n## Screencasts\n\n - [Creating web components](https://vimeo.com/53730178)\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Articles\n\n  - building a [date picker component](http://tjholowaychuk.com/post/37832588021/building-a-date-picker-component)\n  - original [component blog post](http://tjholowaychuk.com/post/27984551477/components)\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install [name ...]      install one or more components\n  create [dir]            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  wiki                    open the components list wiki page\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n\n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Searching for components\n\n  By adding your component to the [Components List](https://github.com/component/component/wiki/Components) wiki page it will become automatically available to `component-search(1)`. When invoked with no query all components are displayed, otherwise a filtered search, ordered by the number of github \"stars\":\n\n```\n$ component search ui\n\n  component/dialog\n  url: https://github.com/component/dialog\n  desc: Dialog component\n  ★ 12\n\n  component/notification\n  url: https://github.com/component/notification\n  desc: Notification component\n  ★ 10\n\n  component/overlay\n  url: https://github.com/component/overlay\n  desc: Overlay component\n  ★ 7\n\n```\n\n## Using GitHub as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n  Another benefit of this is that there are zero name collisions, for example\n  you may use \"component/tip\" for a dependency of \"foo\", and \"someuser/tip\"\n  as a dependency of \"bar\", providing `require('tip')` in each. This prevents\n  obscure or irrelevant naming such as \"progress\", \"progress2\", \"progress-bar\",\n  \"progress-component\" found in npm.\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to GitHub, you're all done!\n\n```\nname: popover\ndescription: Popover UI component\ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to GitHub.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Using private components\n\n  `component(1)` uses [~/.netrc](http://man.cx/netrc(4), like other tools such as [curl](http://man.cx/curl) and [git](http://git-scm.com/), to specify credentials for remote hosts. Simply create a `~/.netrc` file in the home directory:\n\n```\nmachine raw.github.com\n  login visionmedia\n  password pass123\n```\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Contributors\n\n  - TJ Holowaychuk\n  - Guillermo Rauch\n  - Garrett Johnson\n  - Amir Abu Shareb\n  - Adam Sanderson\n  - Matt Mueller\n  - Forbes Lindesay\n  - Arpad Borsos\n  - Dan Williams\n  - Damián Suárez\n  - Tim Oxley\n  - Jeremy Worboys\n  - Nick Jackson\n  - Cameron Bytheway\n\n## Example applications\n\n  Open source application examples:\n\n  - Example using [script tags](https://github.com/component/script-tag-example) for integrating component with existing non-commonjs applications or frameworks\n  - [Todo list](https://github.com/component/todo) example comprised of private and public components\n  - [Component.io](https://github.com/component/component.io) website\n  - [Posty](https://github.com/visionmedia/posty)\n  - [NoFlo](noflojs.org) flow-based programming environment\n\n## Extensions\n\n - [component-graph(1)](https://github.com/component/component-graph) dependency graphs for component projects\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"Readme.md","bugs":{"url":"https://github.com/component/component/issues"},"_id":"component@0.17.6","dist":{"shasum":"595611ac635c4975cd2089841f99432ef47b9bf4","tarball":"http://registry.npmjs.org/component/-/component-0.17.6.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"tjholowaychuk","email":"tj@vision-media.ca"},"maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}]}},"readme":"\n# component\n\n  Component package manager.\n\n## Installation\n\n     $ npm install -g component\n\n## Installing packages\n\n  To install one or more packages, simply pass their github\n  repo names as arguments to `component install`. Dependencies\n  are resolved and the component contents are downloaded into\n  `./components` by default. View `component help install` for details.\n\n```\n$ component install component/tip\n  \n   install : component/tip@master\n       dep : component/emitter@master\n   install : component/emitter@master\n       dep : component/jquery@master\n   install : component/jquery@master\n     fetch : component/tip:index.js\n     fetch : component/tip:tip.css\n     fetch : component/tip:tip.html\n     fetch : component/emitter:index.js\n     fetch : component/jquery:index.js\n  complete : component/emitter\n  complete : component/jquery\n  complete : component/tip\n```\n\n## Usage\n\n Via `--help`:\n\n```\n\nUsage: component <command> [options]\n\nOptions:\n\n  -h, --help     output usage information\n  -V, --version  output the version number\n\nCommands:\n\n  install <name ...>      install one or more components\n  create <dir>            create a component skeleton\n  search [query]          search with the given query\n  convert <file ...>      convert html files to js modules\n  register <user>/<proj>  register a component so others can find it\n  info <name> [prop]      output json component information\n  changes <name>          output changelog contents\n  docs <name>             output readme contents\n  open <name>             open component github repo\n  build                   build the component\n  ls                      list installed components\n\n```\n\n## Features\n\n  - no registry publishing or account required, uses github repositories\n  - pretty fast (~2x faster than uncached npm at the time of comparison)\n  - extensible sub-commands via `component-YOURCOMMAND` git-style\n  - component skeleton creation command\n  - installs dependencies from the command-line or ./component.json\n\n## Using Github as a registry\n\n  By using GitHub as the registry, `component(1)` is automatically\n  available to you without further explicit knowledge or work\n  creating a registry account etc.\n\n  A nice side-effect of this namespaced world is that dependencies\n  are explicit and self-documenting. No longer do you need to query\n  the registry for a \"repo\" property that may not exist, it's simply\n  built in to the package name, for example [\"visionmedia/page.js\"](https://github.com/visionmedia/page.js) rather\n  than the unclear \"page\".\n\n## Creating a component\n\n  The `component-create(1)` command can create a component\n  project skeleton for you by filling out the prompts. Once\n  this repo is published to Github, you're all done!\n\n```\nname: popover\ndescription: Popover UI component \ndoes this component have js? yes\ndoes this component have css? yes\ndoes this component have html? yes\n\n     create : popover\n     create : popover/index.js\n     create : popover/template.html\n     create : popover/popover.css\n     create : popover/Makefile\n     create : popover/Readme.md\n     create : popover/.gitignore\n     create : popover/component.json\n\n```\n\n  A `Makefile` is created for you in order to create a build of the component,\n  complete with installed dependencies simply execute `make`.\n\n## Templates\n\n  Because `component(1)` has no notion of a \"template\", even simple HTML files\n  should be converted to a `require()`-able module. It is recommended that public\n  components shared within the community use regular HTML templates, and regular\n  CSS stylesheets to maximize contributions, however if you wish to use alternate\n  technologies just make sure to compile them before publishing them to Github.\n\n  For the recommended use-case of regular HTML, the `component-convert(1)` command\n  will translate a regular HTML file to its `require()`-able JavaScript counterpart.\n\n## Developing component(1) sub-commands\n\n  `component(1)` and sub-commands are structured much like `git(1)`,\n  in that sub-commands are simply separate executables. For example\n  `$ component info pkg` and `$ component-info pkg` are equivalent.\n\n  Because of this you'll likely want `PATH=\"./bin:$PATH\"` in your\n  profile or session while developing component, otherwise `./bin/component`\n  will have a hard time finding the sub-commands.\n\n## Running tests\n\nMake sure dependencies are installed:\n\n```\n$ npm install\n```\n\nThen run:\n\n```\n$ make test\n```\n\n## Shout-outs\n\n  This tool is of course inspired by various package managers out there,\n  npm, volo, etc. My hope is that other communities will re-implement this\n  simple tool in their language of choice so that we can all consume components\n  easily.\n\n## Screencasts\n\n - [App integration introduction](https://vimeo.com/48054442)\n\n## Links\n\n - [Mailing List](https://groups.google.com/group/componentjs)\n - component [\"spec\"](https://github.com/component/spec/wiki)\n - join `#components` on freenode\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainers":[{"name":"tjholowaychuk","email":"tj@vision-media.ca"}],"time":{"modified":"2013-09-17T15:33:18.342Z","created":"2012-08-30T15:09:44.710Z","0.0.1":"2012-08-30T15:09:46.630Z","0.0.2":"2012-08-30T15:12:22.727Z","0.0.3":"2012-08-30T17:10:44.447Z","0.0.4":"2012-09-01T20:59:35.682Z","0.0.5":"2012-09-04T20:13:44.146Z","0.0.6":"2012-09-06T03:58:19.966Z","0.0.7":"2012-09-14T23:45:06.159Z","0.1.0":"2012-09-19T01:33:26.556Z","0.1.1":"2012-09-20T01:14:58.169Z","0.2.0":"2012-10-06T23:08:09.411Z","0.3.0":"2012-10-10T20:38:08.221Z","0.4.0":"2012-10-16T00:00:44.188Z","0.4.1":"2012-10-16T15:47:14.764Z","0.4.2":"2012-10-17T22:32:15.053Z","0.5.0":"2012-10-19T22:48:05.444Z","0.6.0":"2012-10-22T16:37:07.454Z","0.6.2":"2012-10-22T22:08:24.338Z","0.6.3":"2012-10-24T16:30:19.738Z","0.6.4":"2012-10-27T01:44:20.570Z","0.7.0":"2012-10-31T22:35:10.463Z","0.7.1":"2012-11-02T20:58:35.523Z","0.8.0":"2012-11-04T20:23:23.948Z","0.9.0":"2012-11-07T01:15:38.333Z","0.9.1":"2012-11-28T21:00:41.204Z","0.10.0":"2012-12-05T00:20:10.431Z","0.10.1":"2012-12-07T14:06:34.230Z","0.11.0":"2012-12-30T18:10:27.716Z","0.11.1":"2013-02-11T21:00:47.065Z","0.12.0":"2013-02-15T16:43:14.629Z","0.13.0":"2013-02-24T18:59:53.533Z","0.13.1":"2013-03-19T23:19:59.904Z","0.13.2":"2013-03-26T23:19:59.704Z","0.14.0":"2013-04-23T19:06:03.540Z","0.15.0":"2013-04-25T02:48:34.146Z","0.15.1":"2013-04-26T15:49:31.869Z","0.16.0":"2013-05-14T00:23:47.338Z","0.16.1":"2013-05-30T16:15:50.701Z","0.16.2":"2013-05-31T15:37:31.263Z","0.16.3":"2013-06-06T19:48:28.297Z","0.16.4":"2013-06-19T01:06:51.154Z","0.16.5":"2013-06-26T15:47:43.342Z","0.16.6":"2013-07-03T01:27:19.421Z","0.16.7":"2013-07-05T23:34:27.475Z","0.16.8":"2013-07-17T17:28:46.831Z","0.17.0":"2013-07-19T16:40:14.196Z","0.17.2":"2013-09-03T14:59:42.651Z","0.17.3":"2013-09-06T15:32:06.639Z","0.17.4":"2013-09-12T14:24:38.307Z","0.17.5":"2013-09-13T14:52:19.651Z","0.17.6":"2013-09-17T15:33:18.342Z"},"author":{"name":"TJ Holowaychuk","email":"tj@vision-media.ca"},"users":{"stereosteve":true,"coreh":true,"tjholowaychuk":true,"bat":true,"sjonnet19":true,"sjonnet":true,"dbrockman":true,"maxmaximov":true,"nak2k":true},"repository":{"type":"git","url":"git://github.com/component/component.git"},"_attachments":{"component-0.17.6.tgz":{"content_type":"application/octet-stream","revpos":134,"digest":"md5-O98CHnVCrmrbrGFYFqW2Ww==","length":18418,"stub":true},"component-0.17.5.tgz":{"content_type":"application/octet-stream","revpos":132,"digest":"md5-xEvyM05cncjrKK4c2SN4Ig==","length":18273,"stub":true},"component-0.17.4.tgz":{"content_type":"application/octet-stream","revpos":130,"digest":"md5-MSTnr1U23qSbWuNVxsN/cA==","length":18350,"stub":true},"component-0.17.3.tgz":{"content_type":"application/octet-stream","revpos":128,"digest":"md5-5UddnOzzELK6ZhY97a2XwA==","length":18340,"stub":true},"component-0.17.2.tgz":{"content_type":"application/octet-stream","revpos":126,"digest":"md5-6vyz2lrYNsQ5KkICbjCkkg==","length":18320,"stub":true},"component-0.17.0.tgz":{"content_type":"application/octet-stream","revpos":124,"digest":"md5-qeFlTyTmTjv0kC94ukRhrA==","length":17883,"stub":true},"component-0.16.8.tgz":{"content_type":"application/octet-stream","revpos":122,"digest":"md5-YdKz2UD8bx/lJ2soQgpf1A==","length":17975,"stub":true},"component-0.16.7.tgz":{"content_type":"application/octet-stream","revpos":120,"digest":"md5-NMx8azqFP7ZGu8A0MrDC4A==","length":17622,"stub":true},"component-0.16.6.tgz":{"content_type":"application/octet-stream","revpos":118,"digest":"md5-pAbKI0nrZKj9CSYaiF9VIg==","length":17594,"stub":true},"component-0.16.5.tgz":{"content_type":"application/octet-stream","revpos":116,"digest":"md5-UfdZCr68lCU8llvfpmsV5A==","length":17654,"stub":true},"component-0.16.4.tgz":{"content_type":"application/octet-stream","revpos":114,"digest":"md5-gOJ5Tjkg1m2RYvnBfAELcA==","length":17627,"stub":true},"component-0.16.3.tgz":{"content_type":"application/octet-stream","revpos":111,"digest":"md5-+omA2GT5pAGzuplWBBZFKg==","length":17385,"stub":true},"component-0.16.2.tgz":{"content_type":"application/octet-stream","revpos":109,"digest":"md5-A426JgqzUsXNzGlPPkW1gA==","length":17367,"stub":true},"component-0.16.1.tgz":{"content_type":"application/octet-stream","revpos":107,"digest":"md5-0TO51CyCProbhsvzqTysUQ==","length":17322,"stub":true},"component-0.16.0.tgz":{"content_type":"application/octet-stream","revpos":105,"digest":"md5-MllM3aUvySW/F/eRARJ9zQ==","length":17178,"stub":true},"component-0.15.1.tgz":{"content_type":"application/octet-stream","revpos":103,"digest":"md5-tf+cix4tkcYWDrJEwnLvHA==","length":16901,"stub":true},"component-0.15.0.tgz":{"content_type":"application/octet-stream","revpos":101,"digest":"md5-JrKyCix1We2ry2fdTYdOxA==","length":16877,"stub":true},"component-0.14.0.tgz":{"content_type":"application/octet-stream","revpos":99,"digest":"md5-OtDj9n7KLFSSwdcQ8230Jg==","length":16860,"stub":true},"component-0.13.2.tgz":{"content_type":"application/octet-stream","revpos":96,"digest":"md5-oc+YatqWUwLiObTfjH7OXw==","length":16698,"stub":true},"component-0.13.1.tgz":{"content_type":"application/octet-stream","revpos":94,"digest":"md5-WhXYe758DzVsEso6c+OEBQ==","length":16728,"stub":true},"component-0.13.0.tgz":{"content_type":"application/octet-stream","revpos":90,"digest":"md5-ApBylYWtl5DvrIF9hIL0Xg==","length":16488,"stub":true},"component-0.12.0.tgz":{"content_type":"application/octet-stream","revpos":88,"digest":"md5-evq7YndlBu50IdIo7yspAw==","length":16166,"stub":true},"component-0.11.1.tgz":{"content_type":"application/octet-stream","revpos":86,"digest":"md5-/TzUewapqIbBOj1rytsJAw==","length":16079,"stub":true},"component-0.11.0.tgz":{"content_type":"application/octet-stream","revpos":80,"digest":"md5-pN6WBu/+zxds/v3snJ4Ixg==","length":824176,"stub":true},"component-0.10.1.tgz":{"content_type":"application/octet-stream","revpos":75,"digest":"md5-sd1Uug1A0BeVaqDy+K6JHQ==","length":824904,"stub":true},"component-0.10.0.tgz":{"content_type":"application/octet-stream","revpos":73,"digest":"md5-WVyH2F9Q8MHiIAJjtqnIgQ==","length":14955,"stub":true},"component-0.9.1.tgz":{"content_type":"application/octet-stream","revpos":71,"digest":"md5-hWzhJMfppLUUGUt66fgrpw==","length":17343,"stub":true},"component-0.9.0.tgz":{"content_type":"application/octet-stream","revpos":69,"digest":"md5-dh6b/UA4T6P/SYQvN3AyRQ==","length":14815,"stub":true},"component-0.8.0.tgz":{"content_type":"application/octet-stream","revpos":63,"digest":"md5-OdDLUR76GJ/JXXliOSWu/Q==","length":14594,"stub":true},"component-0.7.1.tgz":{"content_type":"application/octet-stream","revpos":61,"digest":"md5-kcaA4q3v8/i3cWD60ozZEg==","length":14475,"stub":true},"component-0.7.0.tgz":{"content_type":"application/octet-stream","revpos":59,"digest":"md5-QFF+7GfsOzBqERpo0RR7hQ==","length":14348,"stub":true},"component-0.6.4.tgz":{"content_type":"application/octet-stream","revpos":57,"digest":"md5-TH0NV1YW+L0UD55bm5G3Xw==","length":13626,"stub":true},"component-0.6.3.tgz":{"content_type":"application/octet-stream","revpos":55,"digest":"md5-wapp5iu3xeM0grRgJVDoog==","length":13435,"stub":true},"component-0.6.2.tgz":{"content_type":"application/octet-stream","revpos":53,"digest":"md5-sp0F4gbYdgmh5x3uWAkujw==","length":14558,"stub":true},"component-0.6.0.tgz":{"content_type":"application/octet-stream","revpos":51,"digest":"md5-DtUihNd3FF58CFUxHlFVtg==","length":91352,"stub":true},"component-0.5.0.tgz":{"content_type":"application/octet-stream","revpos":49,"digest":"md5-FTl3+NdZeh+ORUNuK07zag==","length":91199,"stub":true},"component-0.4.2.tgz":{"content_type":"application/octet-stream","revpos":47,"digest":"md5-TkgQrNrYPXLdwZwvJgHuvw==","length":91360,"stub":true},"component-0.4.1.tgz":{"content_type":"application/octet-stream","revpos":45,"digest":"md5-9kPi6lppxGhHAo8mhfnm9w==","length":91283,"stub":true},"component-0.4.0.tgz":{"content_type":"application/octet-stream","revpos":43,"digest":"md5-O1dTsLKrWMVatvIyM1A9XA==","length":91270,"stub":true},"component-0.3.0.tgz":{"content_type":"application/octet-stream","revpos":40,"digest":"md5-gzjnSesdpESloBC5oFAyOg==","length":90704,"stub":true},"component-0.2.0.tgz":{"content_type":"application/octet-stream","revpos":38,"digest":"md5-xMya6etlFyzkqaEQkcBXXA==","length":90385,"stub":true},"component-0.1.1.tgz":{"content_type":"application/octet-stream","revpos":36,"digest":"md5-n4Xaf5n9Jzj3n3Xl1E3C8g==","length":89953,"stub":true},"component-0.1.0.tgz":{"content_type":"application/octet-stream","revpos":34,"digest":"md5-BOd8kigibXAx4Y6AY1ZVkQ==","length":11407,"stub":true},"component-0.0.7.tgz":{"content_type":"application/octet-stream","revpos":28,"digest":"md5-44ZqfaoMm8zJJxMRastTYg==","length":12269,"stub":true},"component-0.0.6.tgz":{"content_type":"application/octet-stream","revpos":24,"digest":"md5-maum6NtpWmReVzZ6nxGVXQ==","length":89141,"stub":true},"component-0.0.5.tgz":{"content_type":"application/octet-stream","revpos":14,"digest":"md5-Pv6iSiCkAV4zbYMObiZKZg==","length":88967,"stub":true},"component-0.0.4.tgz":{"content_type":"application/octet-stream","revpos":12,"digest":"md5-K0ZoSOP8FYRwIlXcH+mEHQ==","length":88665,"stub":true},"component-0.0.3.tgz":{"content_type":"application/octet-stream","revpos":7,"digest":"md5-7I08vNqt4MKdO6wjarHXlw==","length":88373,"stub":true},"component-0.0.2.tgz":{"content_type":"application/octet-stream","revpos":5,"digest":"md5-aYAwgIlBquFoZUSeQYujsQ==","length":88342,"stub":true},"component-0.0.1.tgz":{"content_type":"application/octet-stream","revpos":3,"digest":"md5-4rSUNDhfdZ4XTDRLGxqBYA==","length":88300,"stub":true}}}